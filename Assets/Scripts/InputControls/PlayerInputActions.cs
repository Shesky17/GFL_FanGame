//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Scripts/InputControls/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerAction"",
            ""id"": ""6ac10a22-eb66-4817-977c-7df08d1d3e6d"",
            ""actions"": [
                {
                    ""name"": ""TouchDragLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a08754a1-3e3c-4a25-ba1b-4b2e50362070"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""LookBtn"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchDragLookStick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""03a6fef5-ce68-4867-ada8-e571bd7c0895"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NoAction"",
                    ""type"": ""Value"",
                    ""id"": ""1ccc01d9-ff3f-4f0a-993e-afa6c3f13c23"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ba147d4d-ee06-4e8d-a7cc-8bc5e2ae98cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""86d58439-d1db-4a19-97e2-7b7255c07f6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldFire"",
                    ""type"": ""Button"",
                    ""id"": ""54e2c43e-65a3-44d9-8d6b-efe901630d0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""d612c2f7-28a9-4f60-b33b-fe1aa928320c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""bd8721f6-0ec1-45fa-98ed-13eb71ea3e93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f48435c4-cc67-4033-bd02-09549af2fd0a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""16997442-c809-41fa-baf9-72d2272665d4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""794ae715-37d1-48bd-a4c2-3f3aa27596f5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ca649599-dcb3-421e-9976-c46ce1109309"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5dae671b-480f-49a2-a72f-3d158384d286"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d402f5cf-2d21-417e-9034-10d83c368a90"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ea5711b2-5f48-45c7-a804-770561d4e0bc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77ebf645-27aa-4b35-9c07-d5b83b13e52b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""645fb17f-4ddb-44a6-8d7d-2b6e6c470298"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00e0e8af-dc3a-428d-8f9d-459f6fe00707"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchDragLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fce3f706-44f2-40b4-9a5b-ecaa2cd4c7b1"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchDragLookStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a048115-26be-425a-82cc-7bc118d78100"",
                    ""path"": ""<HID>"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NoAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63412437-ad6c-4182-a3ca-857404614866"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerAction
        m_PlayerAction = asset.FindActionMap("PlayerAction", throwIfNotFound: true);
        m_PlayerAction_TouchDragLook = m_PlayerAction.FindAction("TouchDragLook", throwIfNotFound: true);
        m_PlayerAction_TouchDragLookStick = m_PlayerAction.FindAction("TouchDragLookStick", throwIfNotFound: true);
        m_PlayerAction_NoAction = m_PlayerAction.FindAction("NoAction", throwIfNotFound: true);
        m_PlayerAction_Move = m_PlayerAction.FindAction("Move", throwIfNotFound: true);
        m_PlayerAction_Jump = m_PlayerAction.FindAction("Jump", throwIfNotFound: true);
        m_PlayerAction_HoldFire = m_PlayerAction.FindAction("HoldFire", throwIfNotFound: true);
        m_PlayerAction_Reload = m_PlayerAction.FindAction("Reload", throwIfNotFound: true);
        m_PlayerAction_Aim = m_PlayerAction.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerAction
    private readonly InputActionMap m_PlayerAction;
    private IPlayerActionActions m_PlayerActionActionsCallbackInterface;
    private readonly InputAction m_PlayerAction_TouchDragLook;
    private readonly InputAction m_PlayerAction_TouchDragLookStick;
    private readonly InputAction m_PlayerAction_NoAction;
    private readonly InputAction m_PlayerAction_Move;
    private readonly InputAction m_PlayerAction_Jump;
    private readonly InputAction m_PlayerAction_HoldFire;
    private readonly InputAction m_PlayerAction_Reload;
    private readonly InputAction m_PlayerAction_Aim;
    public struct PlayerActionActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActionActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchDragLook => m_Wrapper.m_PlayerAction_TouchDragLook;
        public InputAction @TouchDragLookStick => m_Wrapper.m_PlayerAction_TouchDragLookStick;
        public InputAction @NoAction => m_Wrapper.m_PlayerAction_NoAction;
        public InputAction @Move => m_Wrapper.m_PlayerAction_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerAction_Jump;
        public InputAction @HoldFire => m_Wrapper.m_PlayerAction_HoldFire;
        public InputAction @Reload => m_Wrapper.m_PlayerAction_Reload;
        public InputAction @Aim => m_Wrapper.m_PlayerAction_Aim;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterface != null)
            {
                @TouchDragLook.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnTouchDragLook;
                @TouchDragLook.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnTouchDragLook;
                @TouchDragLook.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnTouchDragLook;
                @TouchDragLookStick.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnTouchDragLookStick;
                @TouchDragLookStick.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnTouchDragLookStick;
                @TouchDragLookStick.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnTouchDragLookStick;
                @NoAction.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnNoAction;
                @NoAction.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnNoAction;
                @NoAction.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnNoAction;
                @Move.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnJump;
                @HoldFire.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnHoldFire;
                @HoldFire.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnHoldFire;
                @HoldFire.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnHoldFire;
                @Reload.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnReload;
                @Aim.started -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_PlayerActionActionsCallbackInterface.OnAim;
            }
            m_Wrapper.m_PlayerActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchDragLook.started += instance.OnTouchDragLook;
                @TouchDragLook.performed += instance.OnTouchDragLook;
                @TouchDragLook.canceled += instance.OnTouchDragLook;
                @TouchDragLookStick.started += instance.OnTouchDragLookStick;
                @TouchDragLookStick.performed += instance.OnTouchDragLookStick;
                @TouchDragLookStick.canceled += instance.OnTouchDragLookStick;
                @NoAction.started += instance.OnNoAction;
                @NoAction.performed += instance.OnNoAction;
                @NoAction.canceled += instance.OnNoAction;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @HoldFire.started += instance.OnHoldFire;
                @HoldFire.performed += instance.OnHoldFire;
                @HoldFire.canceled += instance.OnHoldFire;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);
    public interface IPlayerActionActions
    {
        void OnTouchDragLook(InputAction.CallbackContext context);
        void OnTouchDragLookStick(InputAction.CallbackContext context);
        void OnNoAction(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnHoldFire(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
